---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kcchecker-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/status
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kcchecker
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kcchecker-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kcchecker-role
subjects:
- kind: ServiceAccount
  name: kcchecker
  namespace: kube-system

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kcchecker
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: kcchecker
  template:
    metadata:
      labels:
        name: kcchecker
    spec:
      hostPID: true
      hostNetwork: true
      serviceAccountName: kcchecker
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: kcchecker
        image: ssup2/kcchecker:latest
        imagePullPolicy: Always
        securityContext:
          privileged: true
        volumeMounts:
        - name: containerd-socket
          mountPath: /run/containerd/containerd.sock
        env:
        - name: OPT_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      volumes:
      - name: containerd-socket
        hostPath:
          path: /run/containerd/containerd.sock
          type: Socket
      tolerations:
      - operator: Exists
